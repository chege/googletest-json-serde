name: Feature Request
description: Suggest a new feature or enhancement
labels: [enhancement]
body:
  - type: markdown
    attributes:
      value: |
        Thank you for suggesting a feature! Please help us understand your use case and how this would improve JSON testing with googletest-json-serde.
  - type: checkboxes
    id: checklist
    attributes:
      label: Pre-submission checklist
      options:
        - label: I have searched existing issues and discussions for similar requests
          required: true
        - label: This feature would be generally useful (not just for my specific project)
          required: true
  - type: textarea
    id: problem
    attributes:
      label: Problem or use case
      description: What problem does this feature solve? What JSON testing scenario is currently difficult or impossible?
      placeholder: |
        Currently, there's no easy way to assert that a JSON array contains elements matching a pattern in a specific order, but allowing gaps between matches...
        
        This makes it difficult to test APIs that return paginated results where I only care about certain items in sequence.
    validations:
      required: true
  - type: textarea
    id: proposed_solution
    attributes:
      label: Proposed solution
      description: Describe your ideal solution. What would the API look like? How would you use it in tests?
      placeholder: |
        I'd like a new matcher like `json::contains_sequence!` that works like this:
        
        ```rust
        assert_that!(
            j!(["item1", "item2", "target", "other", "another_target", "item3"]),
            json::contains_sequence![
                json::primitive!(eq("target")),
                json::primitive!(eq("another_target"))
            ]
        );
        ```
        
        This would pass if the elements appear in the given order, but allow other elements in between.
      render: markdown
    validations:
      required: true
  - type: dropdown
    id: matcher_category
    attributes:
      label: Matcher category
      description: Which type of JSON matching does this relate to?
      options:
        - Value matching (primitives, null)
        - Object pattern matching
        - Array matching (ordered/unordered)
        - Nested structure matching
        - Utility/helper matchers
        - Error message improvements
        - Performance improvements
        - Other
    validations:
      required: true
  - type: textarea
    id: example_json
    attributes:
      label: Example JSON data
      description: Provide sample JSON that demonstrates your use case.
      placeholder: |
        ```json
        {
          "results": [
            {"id": 1, "type": "user", "active": true},
            {"id": 2, "type": "admin", "active": false},
            {"id": 3, "type": "user", "active": true}
          ],
          "pagination": {
            "total": 150,
            "page": 1
          }
        }
        ```
      render: markdown
    validations:
      required: false
  - type: textarea
    id: other_notes
    attributes:
      label: Other notes (alternatives, priority, context)
      description: Include workarounds, impact level, or any other helpful context.
      placeholder: |
        - Current workaround: manually matching array indices with poor error messages.
        - Priority: Nice to have for improving test clarity.
        - Similar feature: jest-extended has `toContainInOrder`.
    validations:
      required: false